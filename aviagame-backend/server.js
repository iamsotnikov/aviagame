require("dotenv").config();
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");

const mongoose = require("mongoose");
const connectDB = require("./db");
const Player = require("./models/Player");
const Bet = require("./models/Bet");
const Game = require("./models/Game");


connectDB(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB

const app = express();
const cors = require('cors');
app.use(cors());
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
  },
});

app.use(express.json()); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É JSON-–∑–∞–ø—Ä–æ—Å–æ–≤

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
app.get("/get_balance", async (req, res) => {
  const { playerId } = req.query;

  if (!playerId) {
    return res.status(400).json({ message: "playerId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    let player = await Player.findOne({ username: playerId });

    if (!player) {
      player = await Player.create({ username: playerId, balance: 1000 });
    }

    res.json({ balance: player.balance });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫ –∏–≥—Ä–æ–∫–∞
app.get("/bet_history", async (req, res) => {
  const { telegramId } = req.query;

  if (!telegramId) {
    return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω Telegram ID" });
  }

  try {
    let player = await Player.findOne({ telegramId });

    if (!player) {
      return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const bets = await Bet.find({ playerId: player._id })
      .sort({ createdAt: -1 })
      .limit(10);

    res.json({ bets });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –∏–≥—Ä
app.get("/game_history", async (req, res) => {
  try {
    const games = await Game.find().sort({ endedAt: -1 }).limit(10);
    res.json({ games });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º –ò–î

app.post("/register", async (req, res) => {
  const { playerId, telegramId } = req.body;
  console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", req.body); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞

  if (!playerId || !telegramId) {
    return res.status(400).json({ message: "playerId –∏ telegramId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    let player = await Player.findOne({ username: playerId });

    if (player) {
      player.telegramId = telegramId;
      await player.save();
      return res.json({ message: "Telegram ID –ø—Ä–∏–≤—è–∑–∞–Ω", player });
    }

    const newPlayer = await Player.create({
      username: playerId,
      telegramId,
      balance: 1000,
    });

    res.json({ message: "–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", player: newPlayer });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


//–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
app.post("/place_bet", async (req, res) => {
  const { telegramId, amount } = req.body;

  if (!telegramId || amount <= 0) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  try {
    let player = await Player.findOne({ telegramId });

    if (!player) {
      return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (player.balance < amount) {
      return res.status(400).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" });
    }

    player.balance -= amount;
    await player.save();

    const bet = await Bet.create({
      playerId: player._id,
      amount,
    });

    res.json({ message: "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", balance: player.balance });
    console.log(`üé≤ –ò–≥—Ä–æ–∫ ${telegramId} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ${amount}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


//–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫—ç—à–∞—É—Ç–∞
app.post("/cash_out", async (req, res) => {
  const { telegramId, multiplier } = req.body;

  if (!telegramId || !multiplier || multiplier < 1.0) {
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  try {
    let player = await Player.findOne({ telegramId });

    if (!player) {
      return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const bet = await Bet.findOne({ playerId: player._id }).sort({ createdAt: -1 });

    if (!bet) {
      return res.status(400).json({ message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏" });
    }

    const payout = Math.floor(bet.amount * multiplier);
    player.balance += payout;
    await player.save();

    await Bet.deleteOne({ _id: bet._id });

    res.json({ message: "–ö—ç—à–∞—É—Ç —É—Å–ø–µ—à–µ–Ω", payout, balance: player.balance });
    console.log(`üí∞ –ò–≥—Ä–æ–∫ ${telegramId} –∫—ç—à–∞—É—Ç–Ω—É–ª –ø—Ä–∏ ${multiplier}x –∏ –ø–æ–ª—É—á–∏–ª ${payout}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∞—É—Ç–µ:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});



const PORT = process.env.PORT || 3000;

let gameActive = false;
let crashPoint = 1.0;
let gameInterval;
let activeBets = {};
let targetCrashPoint = 1.0;
let gameCount = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
let playerLossPhase = false; // –§–∞–∑–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
let gameStartTime = null;


// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
function generateCrashMultiplier() {
    const houseEdge = 0.08;
    let R = Math.random();
    if (R === 0) R = 0.0001;

    let alpha = playerLossPhase ? 2.5 : 1.2 + Math.random() * 0.4;
    let crashMultiplier = (1 - houseEdge) / (1 - Math.pow(R, alpha));

    crashMultiplier = Math.max(1.00, parseFloat(crashMultiplier.toFixed(2)));

    gameCount++;
    if (gameCount >= 10 && !playerLossPhase) {
        playerLossPhase = true;
        console.log("‚ö†Ô∏è –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ñ–∞–∑—É –ø—Ä–æ–∏–≥—Ä—ã—à–∞!");
    }

    return crashMultiplier;
}


// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π
function startCountdown() {
  countdown = 9;
  const interval = setInterval(() => {
    io.emit("game_countdown", { countdown });
    countdown--;
    if (countdown < 0) {
      clearInterval(interval);
      startGame();
    }
  }, 1000);
}


// –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
function startGame() {
  if (gameActive) return;

  gameActive = true;
  crashPoint = 1.0;
  activeBets = {};
  targetCrashPoint = generateCrashMultiplier();
  console.log("üõ´ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
  io.emit("game_start", { crashPoint }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã

  gameStartTime = new Date(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞

  gameInterval = setInterval(() => {
    crashPoint += 0.01 * crashPoint;
    io.emit("game_update", { crashPoint });

    for (let player in activeBets) {
      if (activeBets[player].cashOutAt <= crashPoint) {
        let payout = activeBets[player].amount * activeBets[player].cashOutAt;
        io.to(player).emit("cash_out_success", { payout, multiplier: activeBets[player].cashOutAt });
        delete activeBets[player];
      }
    }

    if (crashPoint >= targetCrashPoint) {
      endGame();
    }
  }, 100);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
async function endGame() {  // –°–¥–µ–ª–∞–π —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
  clearInterval(gameInterval);
  gameActive = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
  console.log(`üí• –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–µ ${targetCrashPoint.toFixed(2)}x`);

  io.emit("game_end", { crashPoint: targetCrashPoint }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã

  await Game.create({  // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º await
    crashMultiplier: targetCrashPoint,
    startedAt: gameStartTime,
    endedAt: new Date(),
  });

  console.log("‚è≥ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 9 —Å–µ–∫—É–Ω–¥...");
  io.emit("game_restart", { countdown: 9 }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç—Å—á–µ—Ç–∞
  setTimeout(startGame, 9000); // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 9 —Å–µ–∫—É–Ω–¥
  startCountdown();
}




// WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
io.on("connection", (socket) => {
  console.log(`–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

  socket.on("place_bet", async (data) => {
    if (!gameActive) {
      socket.emit("bet_error", { message: "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å" });
      return;
    }

    if (activeBets[socket.id]) {
      socket.emit("bet_error", { message: "–°—Ç–∞–≤–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞" });
      return;
    }

    if (data.amount <= 0) {
      socket.emit("bet_error", { message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏" });
      return;
    }

    let player = await Player.findOne({ username: socket.id });

    if (!player) {
      player = await Player.create({ username: socket.id, balance: 1000 });
    }

    if (player.balance < data.amount) {
      socket.emit("bet_error", { message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" });
      return;
    }

    player.balance -= data.amount;
    await player.save();

    const bet = await Bet.create({
      playerId: player._id,
      amount: data.amount,
    });

    activeBets[socket.id] = { amount: data.amount, cashOutAt: null };
    socket.emit("bet_success", { amount: data.amount });

    console.log(`üé≤ –ò–≥—Ä–æ–∫ ${socket.id} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É ${data.amount}`);
  });

  socket.on("cash_out", () => {
    if (!activeBets[socket.id]) {
      socket.emit("cash_out_error", { message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏" });
      return;
    }
    if (activeBets[socket.id].cashOutAt !== null) {
      socket.emit("cash_out_error", { message: "–í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ –¥–µ–Ω—å–≥–∏" });
      return;
    }

    activeBets[socket.id].cashOutAt = crashPoint;
    console.log(`üí∞ –ò–≥—Ä–æ–∫ ${socket.id} –∑–∞–±—Ä–∞–ª –¥–µ–Ω—å–≥–∏ –ø—Ä–∏ ${crashPoint.toFixed(2)}x`);
  });

  socket.on("disconnect", () => {
    console.log(`–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    delete activeBets[socket.id];
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  socket.emit("game_update", { crashPoint });
});


// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  startGame();
});

