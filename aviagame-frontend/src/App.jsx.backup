import React, { useState, useEffect } from "react";
import axios from "axios";
import io from "socket.io-client";

function App() {
  const [balance, setBalance] = useState(0);
  const [playerId, setPlayerId] = useState("");
  const [isRegistered, setIsRegistered] = useState(false);
  const [player, setPlayer] = useState(null);
  const [gameStarted, setGameStarted] = useState(false);
  const [crashPoint, setCrashPoint] = useState(1.0);
  const [activeBet, setActiveBet] = useState(null);
  const [betAmount, setBetAmount] = useState(0);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    const newSocket = io("http://85.209.134.201:3000"); // –£–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ WebSocket
    setSocket(newSocket);

    newSocket.on("game_update", (data) => {
      setCrashPoint(data.crashPoint); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    });

    newSocket.on("bet_success", (data) => {
      setBalance(data.balance); // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
      setActiveBet({ amount: data.amount });
    });

    newSocket.on("bet_error", (error) => {
      alert(error.message); // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å
    });

    return () => newSocket.close();
  }, []);

  const getBalance = async () => {
    try {
      const response = await axios.get("http://85.209.134.201:3000/get_balance", {
        params: { playerId },
      });
      setBalance(response.data.balance);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
    }
  };

  const registerPlayer = async () => {
    if (!playerId) {
      alert("–í–≤–µ–¥–∏—Ç–µ playerId!");
      return;
    }

    try {
      const telegramId = "exampleTelegramId"; // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–¥–∞–µ–º telegramId
      const response = await axios.post("http://85.209.134.201:3000/register", {
        playerId,
        telegramId,
      });
      setPlayer(response.data.player);
      setIsRegistered(true);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    }
  };

  const startGame = () => {
    if (socket) {
      socket.emit("start_game");
      setGameStarted(true);
    }
  };

  const placeBet = () => {
    if (!gameStarted) {
      alert("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!");
      return;
    }

    if (betAmount <= 0 || betAmount > balance) {
      alert("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏");
      return;
    }

    socket.emit("place_bet", { amount: betAmount });
  };

  const cashOut = () => {
    if (activeBet) {
      socket.emit("cash_out");
    } else {
      alert("–í—ã –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Å—Ç–∞–≤–∫—É!");
    }
  };

  useEffect(() => {
    if (playerId) {
      getBalance();
    }
  }, [playerId]);

  return (
    <div className="App">
      <h1>AVIAJET üöÄ</h1>

      {isRegistered ? (
        <div>
          <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {player.username}!</h2>
          <h2>–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ</h2>
          {gameStarted ? (
            <div>
              <h3>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {crashPoint}x</h3>
              <input
                type="number"
                value={betAmount}
                onChange={(e) => setBetAmount(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É"
              />
              <button onClick={placeBet}>–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É</button>
              <button onClick={cashOut}>–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏</button>
            </div>
          ) : (
            <button onClick={startGame}>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
          )}
        </div>
      ) : (
        <div>
          <input
            type="text"
            value={playerId}
            onChange={(e) => setPlayerId(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ playerId"
          />
          <button onClick={registerPlayer}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞</button>
        </div>
      )}
    </div>
  );
}

export default App;

