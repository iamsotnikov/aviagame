require('dotenv').config();
const express = require('express');
const http = require('http');
const cors = require('cors');
const { Server } = require('socket.io');
const axios = require('axios');

const app = express();
const server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

app.use(cors());
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
const verifyTelegramAuth = async (initData) => {
  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/getMe`;

  try {
    const response = await axios.get(url);
    if (response.data.ok) {
      return true; // Telegram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±–æ—Ç–∞
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram:", error.message);
  }

  return false;
};

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.send('Backend —Ä–∞–±–æ—Ç–∞–µ—Ç! Telegram API –ø–æ–¥–∫–ª—é—á–µ–Ω.');
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
io.on('connection', (socket) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Telegram
  socket.on('telegram_auth', async (data) => {
    console.log("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", data);
    
    const isValid = await verifyTelegramAuth(data.initData);
    if (isValid) {
      console.log("‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:", data);
      socket.emit('auth_success', { message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" });
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!");
      socket.emit('auth_error', { message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!" });
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  socket.on('message', (data) => {
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', data);
    io.emit('message', data);
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  socket.on('disconnect', () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
